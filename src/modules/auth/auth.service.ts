import { PrismaService } from '../../common/prisma/prisma.service';
import {
  HttpException,
  HttpStatus,
  Injectable,
  UnauthorizedException,
  NotFoundException,
  InternalServerErrorException,
} from '@nestjs/common';
import { RegisterDto, RegisterShipperDto } from './dto/auth.dto';
import { Role } from '@prisma/client';
import { hash, compare } from 'bcrypt';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import { IdGenerator } from 'src/common/helpers/id-generator.helper';
import { EmailService } from './email.service';
import { v4 as uuidv4 } from 'uuid';
import * as nodemailer from 'nodemailer';
import { JsonParser } from 'src/common/helpers/json-parser';
import { InputJsonObject } from '@prisma/client/runtime/library';
import { format } from 'date-fns';

@Injectable()
export class AuthService {
  constructor(
    public prisma: PrismaService,
    private jwtService: JwtService,
    public configService: ConfigService,
    private readonly emailService: EmailService,
  ) {}

  // ƒêƒÉng k√Ω t√†i kho·∫£n
  async register(userData: RegisterDto) {
    try {
      // G√°n role m·∫∑c ƒë·ªãnh l√† Customer ho·∫∑c c√≥ th·ªÉ l√† t√πy ch·ªânh cho shipper ho·∫∑c nh√† h√†ng
      let autoRole: Role = Role.CUSTOMER; // ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† CUSTOMER n·∫øu kh√¥ng c√≥ appSource

      // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa email
      const emailExists = await this.prisma.user.findUnique({
        where: { email: userData.email },
      });
      if (emailExists) {
        throw new HttpException(
          {
            statusCode: HttpStatus.BAD_REQUEST,
            message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
            error: 'Bad Request',
          },
          HttpStatus.BAD_REQUEST,
        );
      }

      // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa s·ªë ƒëi·ªán tho·∫°i
      const phoneExists = await this.prisma.user.findUnique({
        where: { phone: userData.phone },
      });
      if (phoneExists) {
        throw new HttpException(
          {
            statusCode: HttpStatus.BAD_REQUEST,
            message: 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
            error: 'Bad Request',
          },
          HttpStatus.BAD_REQUEST,
        );
      }

      // Ki·ªÉm tra h·ªç t√™n v√† ng√†y sinh
      if (!userData.fullName || !userData.birthday) {
        throw new HttpException(
          {
            statusCode: HttpStatus.BAD_REQUEST,
            message: 'H·ªç t√™n v√† ng√†y sinh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
            error: 'Bad Request',
          },
          HttpStatus.BAD_REQUEST,
        );
      }

      // M√£ h√≥a m·∫≠t kh·∫©u
      const hashPassword = await hash(userData.password, 10);

      // T·∫°o id t√πy ch·ªânh cho ng∆∞·ªùi d√πng
      const customId = await IdGenerator.generateUserId(autoRole, this.prisma);

      // T·∫°o ng∆∞·ªùi d√πng m·ªõi trong c∆° s·ªü d·ªØ li·ªáu
      const user = await this.prisma.user.create({
        data: {
          id: customId,
          email: userData.email,
          phone: userData.phone,
          password: hashPassword,
          fullName: userData.fullName,
          address: JsonParser.safeJsonParse<InputJsonObject>(userData.address),
          gender: userData.gender,
          birthday: format(new Date(userData.birthday), 'dd-MM-yyyy'),
          role: autoRole, // G√°n role m·∫∑c ƒë·ªãnh l√† CUSTOMER ho·∫∑c t√πy ch·ªânh
          isActive: false,
          isApproved: true,
          status: true,
          verifyToken: uuidv4(),
        },
      });

      // G·ª≠i email x√°c th·ª±c
      if (user.verifyToken) {
        await this.emailService.sendVerificationEmail(
          userData.email,
          user.verifyToken,
        );
      } else {
        throw new HttpException(
          {
            statusCode: HttpStatus.BAD_REQUEST,
            message: 'M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá',
            error: 'Bad Request',
          },
          HttpStatus.BAD_REQUEST,
        );
      }

      return { data: user };
    } catch (error) {
      if (error instanceof HttpException) {
        throw error;
      }

      if (error.code === 'P2002') {
        throw new HttpException(
          {
            statusCode: HttpStatus.BAD_REQUEST,
            message: 'S·ªë ƒëi·ªán tho·∫°i ho·∫∑c email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
            error: 'Bad Request',
          },
          HttpStatus.BAD_REQUEST,
        );
      }

      throw new HttpException(
        {
          statusCode: HttpStatus.INTERNAL_SERVER_ERROR,
          message: 'C√≥ l·ªói x·∫£y ra khi t·∫°o t√†i kho·∫£n',
          error: 'Internal Server Error',
        },
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // ƒêƒÉng k√Ω shipper
  async registerShipper(registerShipperDto: RegisterShipperDto) {
    try {
      // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa email
      const emailExists = await this.prisma.user.findUnique({
        where: { email: registerShipperDto.email },
      });
      if (emailExists) {
        throw new HttpException(
          {
            statusCode: HttpStatus.BAD_REQUEST,
            message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
            error: 'Bad Request',
          },
          HttpStatus.BAD_REQUEST,
        );
      }

      // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa s·ªë ƒëi·ªán tho·∫°i
      const phoneExists = await this.prisma.user.findUnique({
        where: { phone: registerShipperDto.phone },
      });
      if (phoneExists) {
        throw new HttpException(
          {
            statusCode: HttpStatus.BAD_REQUEST,
            message: 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
            error: 'Bad Request',
          },
          HttpStatus.BAD_REQUEST,
        );
      }

      // Ki·ªÉm tra gi·∫•y ph√©p l√°i xe v√† bi·ªÉn s·ªë xe c·ªßa shipper
      if (
        !registerShipperDto.licenseNumber ||
        !registerShipperDto.licensePlate
      ) {
        throw new HttpException(
          {
            statusCode: HttpStatus.BAD_REQUEST,
            message: 'Gi·∫•y ph√©p l√°i xe v√† bi·ªÉn s·ªë xe kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
            error: 'Bad Request',
          },
          HttpStatus.BAD_REQUEST,
        );
      }

      // M√£ h√≥a m·∫≠t kh·∫©u
      const hashPassword = await hash(registerShipperDto.password, 10);

      // T·∫°o id t√πy ch·ªânh cho shipper
      const customId = await IdGenerator.generateUserId(
        Role.SHIPPER,
        this.prisma,
      );

      // Ki·ªÉm tra l·∫°i th√¥ng tin ƒë·ªãa ch·ªâ
      if (
        !registerShipperDto.address ||
        !registerShipperDto.address.street ||
        !registerShipperDto.address.districtOrCity ||
        !registerShipperDto.address.ward
      ) {
        throw new HttpException(
          {
            statusCode: HttpStatus.BAD_REQUEST,
            message: 'ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá',
            error: 'Bad Request',
          },
          HttpStatus.BAD_REQUEST,
        );
      }

      // üõ† **T·∫°o user v√† shipper trong c√πng m·ªôt transaction**
      const shipper = await this.prisma.$transaction(async (tx) => {
        // T·∫°o user
        const user = await tx.user.create({
          data: {
            id: customId,
            email: registerShipperDto.email,
            phone: registerShipperDto.phone,
            password: hashPassword,
            fullName: registerShipperDto.fullName,
            address: JsonParser.safeJsonParse<InputJsonObject>(
              registerShipperDto.address,
            ),
            gender: registerShipperDto.gender,
            birthday: format(
              new Date(registerShipperDto.birthday),
              'yyyy-MM-dd',
            ),
            role: Role.SHIPPER,
            isActive: false,
            status: true,
            verifyToken: uuidv4(),
            walletBalance: 0,
          },
        });

        // üõ† **T·∫°o shipper g·∫Øn v·ªõi user**
        await tx.shipper.create({
          data: {
            userId: user.id,
            licenseNumber: registerShipperDto.licenseNumber,
            licensePlate: registerShipperDto.licensePlate,
            avatar: registerShipperDto.avatar,
            idCardFront: registerShipperDto.idCardFront,
            idCardBack: registerShipperDto.idCardBack,
            licenseImage: registerShipperDto.licenseImage,
            birthday: format(
              new Date(registerShipperDto.birthday),
              'yyyy-MM-dd',
            ),
            vehicleType: registerShipperDto.vehicleType,
          },
        });

        return user;
      });

      // G·ª≠i email x√°c th·ª±c
      if (shipper.verifyToken) {
        console.log('Sending verification email to:', registerShipperDto.email);
        await this.emailService.sendVerificationEmail(
          registerShipperDto.email,
          shipper.verifyToken,
        );
      }

      return {
        message:
          'ƒêƒÉng k√Ω th√†nh c√¥ng, vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n',
      };
    } catch (error) {
      console.error('Error registering shipper:', error);
      throw new HttpException(
        {
          statusCode: HttpStatus.INTERNAL_SERVER_ERROR,
          message: 'ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng k√Ω t√†i x·∫ø',
          error: 'Internal Server Error',
        },
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // ƒêƒÉng nh·∫≠p
  async login(data: { user: any }) {
    const user = await this.prisma.user.findUnique({
      where: {
        email: data.user.email,
      },
    });
  
    if (!user) {
      throw new HttpException('T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i', HttpStatus.NOT_FOUND);
    }
  
    // ‚ùå N·∫øu l√† shipper ho·∫∑c restaurant m√† ch∆∞a ƒë∆∞·ª£c admin duy·ªát => c·∫•m ƒëƒÉng nh·∫≠p
    if (
      (user.role === Role.SHIPPER || user.role === Role.RESTAURANTS) &&
      !user.isApproved
    ) {
      throw new HttpException(
        'T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c admin duy·ªát',
        HttpStatus.FORBIDDEN,
      );
    }
  
    // ‚ùå N·∫øu ch∆∞a x√°c th·ª±c email
    if (!user.isActive) {
      throw new HttpException(
        'B·∫°n c·∫ßn x√°c th·ª±c email tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p',
        HttpStatus.FORBIDDEN,
      );
    }
  
    const verify = await compare(data.user.password, user.password);
  
    if (!verify) {
      throw new HttpException(
        { message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' },
        HttpStatus.UNAUTHORIZED,
      );
    }
  
    const payload = { id: user.id, fullName: user.fullName, email: user.email };
    const accessToken = await this.jwtService.signAsync(payload, {
      secret: process.env.ACCESS_TOKEN_SECRET,
      expiresIn: '1h',
    });
  
    const refreshToken = await this.jwtService.signAsync(payload, {
      secret: process.env.REFRESH_TOKEN_SECRET,
      expiresIn: '7d',
    });
  
    return {
      id: user.id,
      fullName: user.fullName,
      email: user.email,
      isActive: user.isActive,
      phone: user.phone,
      role: user.role,
      avatar: user.avatar,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
      __v: user.version,
      accessToken,
      refreshToken,
    };
  }
  

  // T·∫°o l·∫°i token
  async refreshToken(refreshToken: string) {
    try {
      const payload = await this.jwtService.verifyAsync(refreshToken, {
        secret: this.configService.get<string>('JWT_REFRESH_SECRET'),
      });
      return this.generateTokens(payload.sub, payload.email);
    } catch (error) {
      console.error('Error verifying refresh token:', error.message);
      throw new UnauthorizedException('Invalid or expired refresh token');
    }
  }

  generateTokens(sub: any, email: any) {
    const accessToken = this.jwtService.sign(
      { sub, email },
      {
        secret: this.configService.get('JWT_ACCESS_SECRET'),
        expiresIn: '1h',
      },
    );

    const refreshToken = this.jwtService.sign(
      { sub, email },
      {
        secret: this.configService.get('JWT_REFRESH_SECRET'),
        expiresIn: '7d',
      },
    );

    return { accessToken, refreshToken };
  }

  // ƒêƒÉng xu·∫•t
  async logout(userId: string) {
    return { success: true };
  }

  // C·∫≠p nh·∫≠t vai tr√≤ Admin
  async setAdminRole(userId: string, apiKey: string): Promise<void> {
    const user = await this.prisma.user.findUnique({ where: { id: userId } });
    if (!user) {
      throw new NotFoundException('User not found');
    }

    const newUserId = userId.replace(/^(KH|RES|DR)/, 'AD');
    await this.prisma.user.update({
      where: { id: userId },
      data: { role: Role.ADMIN, id: newUserId },
    });
  }

  // X√°c th·ª±c email
  // Ph∆∞∆°ng th·ª©c x√°c th·ª±c email
  async verifyEmail(token: string): Promise<void> {
    const user = await this.prisma.user.findUnique({
      where: { verifyToken: token },
    });

    if (!user) {
      throw new Error('Invalid token');
    }

    // X√°c th·ª±c token v√† c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    user.isVerified = true;
    user.verifyToken = null; // X√≥a token sau khi x√°c th·ª±c

    await this.prisma.user.update({
      where: { id: user.id },
      data: {
        isVerified: true,
        isActive: true,
        verifyToken: null,
      },
    });
  }

  // Qu√™n m·∫≠t kh·∫©u
  async forgotPassword(email: string) {
    const user = await this.prisma.user.findUnique({ where: { email } });
    if (!user)
      throw new HttpException('Email kh√¥ng t·ªìn t·∫°i', HttpStatus.NOT_FOUND);

    const resetToken = uuidv4();
    await this.prisma.user.update({
      where: { id: user.id },
      data: { resetPasswordToken: resetToken },
    });

    await this.emailService.sendResetPasswordEmail(email, resetToken);
    return { message: 'Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u' };
  }

  // Reset Password
  async resetPassword(email: string, newPassword: string): Promise<any> {
    const user = await this.prisma.user.findUnique({ where: { email } });

    if (!user) {
      throw new Error('User not found');
    }

    // T·∫°o m·ªôt token duy nh·∫•t
    const resetToken = uuidv4();

    // L∆∞u token v√†o c∆° s·ªü d·ªØ li·ªáu
    await this.prisma.user.update({
      where: { email },
      data: {
        resetPasswordToken: resetToken,
      },
    });

    // G·ª≠i email v·ªõi ƒë∆∞·ªùng link reset m·∫≠t kh·∫©u
    const resetUrl = `http://localhost:3000/api/auth/reset-password?token=${resetToken}`;

    const transporter = nodemailer.createTransport({
      // C·∫•u h√¨nh SMTP c·ªßa b·∫°n ·ªü ƒë√¢y
    });

    await transporter.sendMail({
      to: email,
      subject: 'Password Reset Request',
      text: `To reset your password, please click the following link: ${resetUrl}`,
    });

    return { message: 'Reset password email sent' };
  }

  // ƒêƒÉng xu·∫•t
  async logoutWithToken(token: string) {
    try {
      return { success: true, message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' };
    } catch (error) {
      throw new InternalServerErrorException('Kh√¥ng th·ªÉ th·ª±c hi·ªán ƒëƒÉng xu·∫•t');
    }
  }
}
