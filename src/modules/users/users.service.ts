import {  Injectable, BadRequestException, NotFoundException, UnauthorizedException, InternalServerErrorException, ForbiddenException } from '@nestjs/common';
import { CreateUserDto, UpdateUserDto, UserFilterDto, UserNameSearchDto } from './dto/users.dto';
import * as bcrypt from 'bcrypt';
import { Gender, Prisma, Role, User } from '@prisma/client';
import { PrismaService } from '../../common/prisma/prisma.service';
import { Request } from 'express';
import { JwtService } from '@nestjs/jwt';
import { compressAndUploadImage } from 'src/common/multer/buffer-image';
declare module 'express' {
    interface Request {
        user?: any;  // Or define a more specific type for your user
    }
}

@Injectable()
export class UsersService {
    constructor(
        private prisma: PrismaService,
        private jwtService: JwtService,
    ) {}

    // Helper function ƒë·ªÉ t·∫°o ID t√πy ch·ªânh
    private async generateCustomId(role: Role): Promise<string> {
        const prefix = {
            [Role.CUSTOMER]: 'KH',
            [Role.RESTAURANTS]: 'ST',
            [Role.SHIPPER]: 'SH',
            [Role.ADMIN]: 'AD'
        }[role];

        // T√¨m user cu·ªëi c√πng c·ªßa role n√†y
        const lastUser = await this.prisma.user.findFirst({
            where: { role },
            orderBy: { id: 'desc' }
        });

        let number = 1;
        if (lastUser) {
            // L·∫•y s·ªë t·ª´ ID cu·ªëi c√πng v√† tƒÉng l√™n 1
            const lastNumber = parseInt(lastUser.id.slice(-3));
            number = lastNumber + 1;
        }

        // T·∫°o s·ªë th·ª© t·ª± v·ªõi padding 3 s·ªë
        return `${prefix}${number.toString().padStart(3, '0')}`;
    }

    //L·∫•y danh s√°ch t√†i kho·∫£n
    getAllUsers = async(req: Request) => {
        let { pageIndex, pageSize } = req.query as any;

        pageIndex = +pageIndex > 0 ? +pageIndex : 1; //chu·ªói convert '' sang Number
        pageSize = +pageSize > 0 ? +pageSize : 3;

        const skip = (pageIndex - 1) * pageSize;
        const totalItems = await this.prisma.user.count();
        const totalPages = Math.ceil(totalItems / pageSize);
        // skip: (page -1) * pageSize,

    const users = await this.prisma.user.findMany({
      take: pageSize, //Limit
      skip: skip, //Offset

      orderBy: {
        createdAt: 'desc',
      },
    });
  
    return {
      pageIndex: pageIndex,
      pageSize: pageSize,
      totalItems: totalItems,
      totalPages: totalPages,
      items: users || [],
    };
  }

    //T·∫°o t√†i kho·∫£n
    createUser = async (body: CreateUserDto): Promise<User> => {
        if(!body.fullName || !body.email || !body.password || !body.phone || !body.role || !body.gender || !body.birthday){
            throw new BadRequestException('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin');
        }

        // NgƒÉn t·∫°o t√†i kho·∫£n ADMIN tr·ª±c ti·∫øp
        if(body.role === Role.ADMIN) {
            throw new BadRequestException('Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n ADMIN tr·ª±c ti·∫øp');
        }
        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
        const existingEmail = await this.prisma.user.findFirst({
            where: { email: body.email }
        });
        if (existingEmail) {
            throw new BadRequestException('Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω');
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i
        const existingPhone = await this.prisma.user.findFirst({
            where: { phone: body.phone }
        });
        if (existingPhone) {
            throw new BadRequestException('S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω');
        }

        const customId = await this.generateCustomId(body.role as Role);
        const hashedPassword = await bcrypt.hash(body.password, 10);
        
        return this.prisma.user.create({
            data: {
                id: customId,
                fullName: body.fullName,
                email: body.email,
                password: hashedPassword,
                phone: body.phone,
                role: body.role as Role,
                gender: body.gender as Gender,
                birthday: body.birthday,
                status: true,
            },
        });
    }

    //X√≥a t√†i kho·∫£n
    async deleteUsers(id: string, currentUser: User) {
      try {
          // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
          const userToDelete = await this.prisma.user.findUnique({
              where: { id }
          });
  
          if (!userToDelete) {
              throw new NotFoundException('T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i');
          }
  
          // Ch·ªâ ADMIN ho·∫∑c ch√≠nh user m·ªõi c√≥ th·ªÉ x√≥a
          if (currentUser.role !== Role.ADMIN && currentUser.id !== id) {
              throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn x√≥a t√†i kho·∫£n n√†y');
          }
  
          // üõ† X√≥a t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan tr∆∞·ªõc khi x√≥a User
          await this.prisma.restaurant.deleteMany({ where: { userId: id } });
          await this.prisma.categories.deleteMany({ where: { id } });
          await this.prisma.food.deleteMany({ where: { id } });
  
          // X√≥a User sau khi x√≥a t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan
          await this.prisma.user.delete({ where: { id } });
  
          return {
              status: 'success',
              code: 200,
              message: 'X√≥a t√†i kho·∫£n th√†nh c√¥ng'
          };
  
      } catch (error) {
          console.error(error);
  
          if (error instanceof Prisma.PrismaClientKnownRequestError) {
              throw new BadRequestException(`Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n n√†y: ${error.message}`);
          }
          throw error;
      }
  }  

    //L·∫•y th√¥ng tin t√†i kho·∫£n
    getUserById = async (id: string, req: any) => {
      if(!id){
        throw new BadRequestException('T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i');
      }
      if(req.user.role !== Role.ADMIN && req.user.id !== id){
        throw new UnauthorizedException('B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin t√†i kho·∫£n kh√°c');
      }
      return this.prisma.user.findUnique({
            where: { id: id },
      });
    }

    //T√¨m ki·∫øm v√† ph√¢n trang
    getPaginatedUsers = async (filters: UserFilterDto) => {
        const { pageIndex, pageSize, keyword } = filters;
        const items_per_page = pageSize;
        const page = pageIndex;
        const search = keyword || '';
    
        const users = await this.prisma.user.findMany({
          take: items_per_page,
          skip: (page - 1) * items_per_page,
          where: {
            OR: [
              {
                fullName: { contains: search },
              },
              {
                email: { contains: search },
              },
            ],
            AND: [
              {
                status: true,
              },
            ],
          },
          orderBy: {
            createdAt: 'desc',
          },
        });
    
        const total = await this.prisma.user.count({
          where: {
            OR: [
              {
                fullName: {
                  contains: search,
                },
              },
              {
                email: {
                  contains: search,
                },
              },
            ],
            AND: [
              {
                status: true,
              },
            ],
          },
        });
    
        return {
          data: users,
          total,
          currentPage: page,
          itemsPerPage: items_per_page,
        };
    }

    //C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n
    updateUser = async (id: string, currentUserId: string, updateUserDto: UpdateUserDto) => {
        if (!id) {
            throw new BadRequestException('T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i');
        }

        // Check if user exists
        const existingUser = await this.prisma.user.findUnique({
            where: { id }
        });

        if (!existingUser) {
            throw new NotFoundException('T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i');
        }

        // Prepare update data
        const updateData: any = {
            fullName: updateUserDto.fullName,
            email: updateUserDto.email,
            phone: updateUserDto.phone,
            gender: updateUserDto.gender as Gender,
            birthday: updateUserDto.birthday,
        };

        // Only hash and update password if it's provided
        if (updateUserDto.password) {
            updateData.password = await bcrypt.hash(updateUserDto.password, 10);
        }
        
        return this.prisma.user.update({
            where: { id },
            data: updateData,
        });
    }

    //T√¨m ki·∫øm t√†i kho·∫£n
    searchUsers = async (filters: UserNameSearchDto) => {
        const { name } = filters;
        const search = name || ''

        return this.prisma.user.findMany({
          where: { fullName: { contains: search } },
        });
    }
  
    //T·∫£i ·∫£nh ƒë·∫°i di·ªán    
    async uploadAvatar(file: Express.Multer.File, userId: number) {
      if (!file) {
        throw new BadRequestException('No file uploaded');
      }
    
      try {
        const avatarUrl: string = await compressAndUploadImage(file); // Avatar URL lu√¥n l√† string
    
        // C·∫≠p nh·∫≠t avatar trong database
        const updatedUser = await this.prisma.user.update({
          where: { id: String(userId) },
          data: { avatar: avatarUrl, updatedAt: new Date() },
          select: { id: true, fullName: true, email: true, avatar: true },
        });
    
        return {
          message: 'Avatar uploaded and compressed successfully',
          user: updatedUser,
        };
      } catch (error) {
        console.error('Upload avatar error:', error);
        throw new BadRequestException('Failed to update avatar');
      }
    }
    
    

    
    // Set quy·ªÅn ADMIN
    async setAdmin(userId: string) {
        try {
            const user = await this.prisma.user.update({
                where: { id: userId },
                data: { role: Role.ADMIN },
            });
            return user;
        } catch (error) {
            console.error('Error setting user as admin:', error);
            throw new InternalServerErrorException('Could not set user as admin: ' + error.message);
        }
    }
}
