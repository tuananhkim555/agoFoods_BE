generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Module

model User {
  id                   String    @id
  email                String    @unique
  password             String
  phone                String    @unique
  fullName             String
  address              String?
  avatar               String?
  role                 Role      @default(CUSTOMER)
  isActive             Boolean   @default(false)
  balance              Float     @default(0)
  gender               Gender
  birthday             String?
  status               Boolean   @default(true)
  resetPasswordToken   String?   @unique
  isVerified           Boolean   @default(false)
  verifyToken          String?   @unique
  verifyTokenExpiresAt DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  restaurants   Restaurant[]   @relation("UserRestaurants")
  shipper       Shipper?
  transactions  Transaction[]
  orders        Order[]
  cart          Cart?
  notifications Notification[]
  chats         Chat[]
  ratings       Rating[]
  comments      Comment[]
  deliveries    Delivery[]
}

enum Role {
  ADMIN
  CUSTOMER
  RESTAURANTS
  SHIPPER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RatingType {
  Restaurant
  Driver
  Food
}

// Model Restaurant 
model Restaurant {
  id                  String   @id @default(uuid())
  title               String
  time                String
  imageUrl            String
  avatar              String // ✅ Thêm ảnh đại diện nhà hàng
  idCard              String   @unique // ✅ Thêm số chứng minh nhà hàng
  userId              String   @unique
  user                User     @relation("UserRestaurants", fields: [userId], references: [id], onDelete: Cascade)
  code                String
  logoUrl             String
  rating              Float    @default(0)
  ratingCount         Int      @default(0)
  description         String?
  category            String?
  pickup              Boolean  @default(true)
  delivery            Boolean  @default(true)
  isActive            Boolean  @default(true)
  verification        String   @default("Pending")
  verificationMessage String?  @default("Your restaurant is being verified")
  isVerified          Boolean  @default(false)
  isAvailable         Boolean  @default(true)
  coords              Json
  reportCount         Int      @default(0) // Số lần bị báo cáo
  isBanned            Boolean  @default(false) // Bị cấm hoạt động
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  version             Int      @default(0) @map("_v")

  products Product[]
  orders   Order[]
  foods    Food[]
  ratings  Rating[]  @relation("RestaurantRating")

  @@index([userId])
}

model Categories {
  id        String   @id @default(cuid())
  title     String
  value     String   @unique
  imageUrl  String
  version   Int      @default(0) @map("_v")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  foods    Food[]
}

// Food Module
model Food {
  id           String     @id @default(uuid())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  title        String
  time         String
  price        Float
  description  String?
  categoryId   String
  category     Categories @relation(fields: [categoryId], references: [id])
  foodTags     Json?      @default("[]")
  foodType     Json?      @default("[]")
  additives    Json?      @default("[]")
  code         String
  rating       Float      @default(0)
  ratings      Rating[]   @relation("FoodRating")
  ratingCount  Int        @default(0)
  imageUrl     Json       @default("[]")
  isAvailable  Boolean    @default(true)
  status       Boolean    @default(true)
  createdAt    DateTime   @default(now())

  // Relations
  cartItems  CartItem[]
  orderItems OrderItem[] @relation("FoodOrderItem")
  comments   Comment[]

  @@index([restaurantId])
  @@index([categoryId])
  @@index([code])
}

model Rating {
  id           String      @id @default(uuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  restaurantId String?
  restaurant   Restaurant? @relation("RestaurantRating", fields: [restaurantId], references: [id])
  foodId       String?
  food         Food?       @relation("FoodRating", fields: [foodId], references: [id])
  driverId     String?
  driver       Driver?     @relation("DriverRating", fields: [driverId], references: [id])
  rating       Float
  ratingType   RatingType
  comment      String?
  createdAt    DateTime    @default(now())

  @@index([userId])
  @@index([restaurantId])
  @@index([foodId])
  @@index([driverId])
}

model Driver {
  id          String   @id @default(uuid())
  name        String
  phone       String
  rating      Float    @default(0)
  ratingCount Int      @default(0)
  ratings     Rating[] @relation("DriverRating")
  orders      Order[]  @relation("DriverOrder")
  createdAt   DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  foodId    String
  food      Food     @relation(fields: [foodId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Order Module
model Order {
  id              String      @id @default(uuid())
  customerId      String
  customer        User        @relation(fields: [customerId], references: [id])
  restaurantId    String
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  total           Float
  delivery        Delivery?
  driverId        String?
  driver          Driver?     @relation("DriverOrder", fields: [driverId], references: [id]) // rating          Rating?
  payment         Payment?
  shipperId       String?
  shipper         Shipper?    @relation("ShipperOrder", fields: [shipperId], references: [userId])
  deliveryAddress String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([customerId])
  @@index([restaurantId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  PICKED_UP
  DELIVERING
  DELIVERED
  CANCELLED
}

model OrderItem {
  id       String @id @default(uuid())
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  foodId   String
  food     Food   @relation("FoodOrderItem", fields: [foodId], references: [id])
  quantity Int
  price    Float
}

// Shipper Module
model Shipper {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  vehicleType  String
  licensePlate String
  status       Boolean  @default(true)
  isActive     Boolean  @default(true)
  latitude     Float?
  longitude    Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]  @relation("ShipperOrder")
}

// Notification Module
model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  content   String
  isRead    Boolean  @default(false)
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Chat Module
model Chat {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[] @relation("ChatMessage")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  chatId     String
  chat       Chat     @relation("ChatMessage", fields: [chatId], references: [id])
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
}

// Payment Module
model Payment {
  id            String   @id @default(uuid())
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id])
  amount        Float
  provider      String // VNPAY, MOMO
  status        Boolean  @default(false)
  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  foodId    String
  food      Food     @relation(fields: [foodId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String     @id @default(uuid())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  name         String
  description  String?
  price        Float
  imageUrls    String     @db.Text
  categoryId   String
  category     Categories @relation(fields: [categoryId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Delivery {
  id        String   @id @default(uuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id])
  shipperId String
  shipper   User     @relation(fields: [shipperId], references: [id])
  status    String
  location  String? // Current location coordinates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Transaction Model
model Transaction {
  id     String            @id @default(uuid())
  userId String
  user   User              @relation(fields: [userId], references: [id])
  amount Float
  type   TransactionType
  status TransactionStatus @default(PENDING)

  // Thông tin chuyển khoản
  bankName      String? // Tên ngân hàng
  accountNumber String? // Số tài khoản nhận tiền
  accountName   String? // Tên chủ tài khoản
  transferCode  String? // Mã giao dịch ngân hàng
  content       String? // Nội dung chuyển khoản (VD: "AGO ST001")
  driverCode    String? // Mã tài xế (VD: "ST001")

  proofImage String? // URL ảnh chụp màn hình chuyển khoản
  adminId    String? // ID admin xử lý
  note       String? // Ghi chú của admin
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum TransactionType {
  DEPOSIT // Nạp tiền
  WITHDRAWAL // Rút tiền
  EARNING // Thu nhập từ đơn hàng
  COMMISSION // Chiết khấu
}

enum TransactionStatus {
  PENDING
  COMPLETED
  REJECTED
  CANCELLED
}
