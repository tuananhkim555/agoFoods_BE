generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id
  email                String    @unique
  password             String
  phone                String    @unique
  fullName             String
  address              Json?
  avatar               String?
  role                 Role      @default(CUSTOMER)
  isActive             Boolean   @default(false)
  isApproved           Boolean   @default(false)
  balance              Float     @default(0)
  gender               Gender
  birthday             String?
  idCard               String?
  walletBalance        Float     @default(0) // Thêm trường walletBalance với giá trị mặc định là 0
  version              Int       @default(0) @map("_v")
  status               Boolean   @default(true)
  resetPasswordToken   String?   @unique
  isVerified           Boolean   @default(false)
  verifyToken          String?   @unique
  verifyTokenExpiresAt DateTime?
  isRestaurantVerified Boolean   @default(false)
  isShipperVerified    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  cartItems     CartItem[]
  chats         Chat[]
  comments      Comment[]
  deliveries    Delivery[]
  notifications Notification[]
  orders        Order[]
  ratings       Rating[]
  restaurants   Restaurant?    @relation("UserRestaurants")
  shipper       Shipper?       @relation("ShipperToUser")
  transactions  Transaction[]
  userAddresses Address[]
}


model Categories {
  id        String   @id @default(cuid())
  title     String
  value     String   @unique
  type      CategoryType
  imageUrl  String
  version   Int      @default(0) @map("_v")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  foods     Food[]
  drinks    Drink[]

  @@index([type])
}

enum CategoryType {
  FOOD
  DRINK
}

model Shipper {
  id                   String          @id @default(uuid())
  userId               String          @unique
  birthday             String?
  vehicleType          String
  licenseNumber        String?
  licensePlate         String?
  licenseImage         String?
  idCardImage          String?
  avatar               String?
  idCardFront          String?
  idCardBack           String?
  status               Boolean         @default(true)
  isActive             Boolean         @default(true)
  latitude             Float?
  longitude            Float?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  walletBalance        Float           @default(0)
  rating               Float           @default(0)
  totalCompletedOrders Int             @default(0)
  totalCancelledOrders Int             @default(0)
  lastActiveAt         DateTime?
  orders               Order[]         @relation("ShipperOrder")
  user                 User            @relation("ShipperToUser", fields: [userId], references: [id])
  shipperReview        ShipperReview[]

  // Thêm quan hệ đối ứng với Rating
  ratings Rating[] @relation("ShipperRating")
}

model Restaurant {
  id                  String   @id @default(uuid())
  title               String
  time                String
  imageUrl            String
  idCard              String   @unique
  userId              String   @unique
  code                String
  logoUrl             String
  avatar              String
  rating              Float    @default(0)
  ratingCount         Int      @default(0)
  description         String?
  category            String?
  pickup              Boolean  @default(true)
  delivery            Boolean  @default(true)
  isActive            Boolean  @default(false)
  isApproved          Boolean  @default(false)
  verification        String   @default("Pending")
  verificationMessage String?  @default("Your restaurant is being verified")
  isVerified          Boolean  @default(false)
  isAvailable         Boolean  @default(true)
  coords              Json
  reportCount         Int      @default(0)
  isBanned            Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  version             Int      @default(0) @map("_v")
  foods               Food[]
  drinks              Drink[] 
  orders              Order[]
  ratings             Rating[] @relation("RestaurantRating")

  user User @relation("UserRestaurants", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Food {
  id           String      @id @default(uuid())
  restaurantId String
  title        String
  time         String
  price        Float
  description  String?
  categoryId   String
  foodTypes    FoodTypes[] @relation("FoodTypes")
  foodTags     FoodTags[]  @relation("FoodTags")
  additives    Additives[] @relation("FoodAdditive")
  code         String
  rating       Float       @default(0)
  ratingCount  Int         @default(0)
  imageUrl     Json
  isAvailable  Boolean     @default(true)
  quantity     Int         @default(0)
  status       Boolean     @default(true)
  cartItems    CartItem[]
  comments     Comment[]
  category     Categories  @relation(fields: [categoryId], references: [id])
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[] @relation("FoodOrderItem")
  ratings      Rating[]    @relation("FoodRating")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([restaurantId])
  @@index([categoryId])
  @@index([code])
}

model FoodTags {
  id    String @id @default(uuid()) // ID duy nhất cho mỗi tag
  name  String @unique() // Tên tag (ví dụ: "Cay", "Nóng", "Healthy")
  foods Food[] @relation("FoodTags") // Liên kết với nhiều món ăn có tag này

  createdAt DateTime @default(now()) // Thời gian tạo
  updatedAt DateTime @updatedAt // Thời gian cập nhật tự động
}

model FoodTypes {
  id    String @id @default(uuid()) // ID duy nhất cho mỗi loại món ăn
  name  String @unique() // Tên loại món ăn (ví dụ: "Món chính", "Tráng miệng", "Đồ uống")
  foods Food[] @relation("FoodTypes") // Liên kết nhiều món ăn vào loại món này

  createdAt DateTime @default(now()) // Thời gian tạo
  updatedAt DateTime @updatedAt // Thời gian cập nhật tự động
}

model Additives {
  id    String @id @default(uuid()) // ID duy nhất cho mỗi thành phần thêm
  title String // Tên thành phần (ví dụ: "Thêm phô mai", "Thêm sốt")
  price Float // Giá thêm cho thành phần

  cartItems  CartItem[]  @relation("CartItemAdditives") // Liên kết với giỏ hàng (nếu có)
  foods      Food[]      @relation("FoodAdditive") // Liên kết với nhiều món ăn có thể chọn thành phần này
  // Quan hệ với OrderItem
  orderItems OrderItem[] @relation("OrderItemAdditives")
  drinks      Drink[]  @relation("DrinkAdditive")

  createdAt DateTime @default(now()) // Thời gian tạo
  updatedAt DateTime @updatedAt // Thời gian cập nhật tự động
}

model Drink {
  id           String      @id @default(uuid())
  restaurantId String
  title        String
  time         String
  price        Float
  description  String?
  categoryId   String
  drinkTypes   DrinkTypes[] @relation("DrinkTypes")
  drinkTags    DrinkTags[]  @relation("DrinkTags")
  additives    Additives[]  @relation("DrinkAdditive")
  code         String
  rating       Float        @default(0)
  ratingCount  Int          @default(0)
  imageUrl     Json
  isAvailable  Boolean      @default(true)
  status       Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  category     Categories   @relation(fields: [categoryId], references: [id])
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]  @relation("DrinkOrderItem")
  ratings      Rating[]     @relation("DrinkRating")
  cartItems   CartItem[]

  @@index([restaurantId])
  @@index([categoryId])
  @@index([code])
}

model DrinkTags {
  id        String   @id @default(uuid())
  name      String   @unique
  drinks    Drink[]  @relation("DrinkTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DrinkTypes {
  id        String   @id @default(uuid())
  name      String   @unique
  drinks    Drink[]  @relation("DrinkTypes")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id           String     @id @default(uuid())
  userId       String
  rating       Float
  comment      String?
  foodId       String? // Trường riêng cho món ăn
  restaurantId String? // Trường riêng cho nhà hàng
  shipperId    String? // Trường riêng cho shipper
  drinkId      String?
  targetType   TargetType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  food       Food?       @relation("FoodRating", fields: [foodId], references: [id], map: "foodRatingFkey")
  restaurant Restaurant? @relation("RestaurantRating", fields: [restaurantId], references: [id], map: "restaurantRatingFkey")
  shipper    Shipper?    @relation("ShipperRating", fields: [shipperId], references: [id], map: "shipperRatingFkey")
  drink      Drink?      @relation("DrinkRating", fields: [drinkId], references: [id], map: "drinkRatingFkey") // Add this line

  @@index([userId])
  @@index([drinkId], map: "Rating_drinkId_fkey")
}


model Address {
  id                   String   @id @default(uuid())
  userId               String
  addressLine1         String
  postalCode           String
  default              Boolean  @default(false)
  deliveryInstructions String?
  latitude             Float
  longitude            Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  version Int  @default(0) @map("_v")
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "UserAddress_userId_fkey")
}

model Order {
  id                String        @id @default(uuid())
  customerId        String
  restaurantId      String
  status            OrderStatus   @default(PENDING)
  total             Float // Tổng tiền món ăn (không bao gồm phí vận chuyển, giảm giá, v.v.)
  grandTotal        Float // Tổng tiền cuối cùng (bao gồm phí vận chuyển, giảm giá, v.v.)
  shipperId         String? // ID của shipper (người giao hàng)
  deliveryAddress   String?
  restaurantAddress String? // Địa chỉ nhà hàng
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  instructions      String? // Ghi chú cho đơn hàng
  promoCode         String? // Mã khuyến mãi
  discountAmount    Float? // Số tiền giảm giá
  notes             String? // Ghi chú từ khách hàng
  orderItems        OrderItem[] // Danh sách các món ăn trong đơn hàng
  rating            Float? // Đánh giá đơn hàng
  feedback          String? // Phản hồi từ khách hàng
  comment           String? // Bình luận từ khách hàng
  restaurantCoords  Json? // Tọa độ nhà hàng
  recipientCoords   Json? // Tọa độ người nhận
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Quan hệ với các model khác
  customer   User       @relation(fields: [customerId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  shipper    Shipper?   @relation("ShipperOrder", fields: [shipperId], references: [id])
  payment         Payment?    @relation("OrderPayment")
  @@index([customerId])
  @@index([restaurantId])
  @@index([shipperId], map: "Order_shipperId_fkey") // Điều chỉnh chỉ số cho shipperId
}

model OrderItem {
  id           String      @id @default(uuid())
  orderId      String
  foodId       String
  quantity     Int
  price        Float // Giá của món ăn tại thời điểm đặt hàng
  additives    Additives[] @relation("OrderItemAdditives") // Các phụ gia được chọn
  instructions String? // Ghi chú riêng cho món ăn này
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Quan hệ với các model khác
  drinkId String?
  drink Drink? @relation("DrinkOrderItem", fields: [drinkId], references: [id])
  food  Food  @relation("FoodOrderItem", fields: [foodId], references: [id])
  order Order @relation(fields: [orderId], references: [id])

  @@index([foodId], map: "OrderItem_foodId_fkey")
  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([drinkId], map: "OrderItem_drinkId_fkey")
}

model ShipperReview {
  id        String   @id @default(uuid())
  shipperId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  shipper   Shipper  @relation(fields: [shipperId], references: [id])

  @@index([shipperId], map: "ShipperReview_shipperId_fkey")
}

model CartItem {
  id         String      @id @default(uuid())
  userId     String
  foodId     String?     // Có thể null nếu là Drink
  drinkId    String?     // Có thể null nếu là Food
  quantity   Int         @default(0)
  totalPrice Float
  additives  Additives[] @relation("CartItemAdditives")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])
  food Food? @relation(fields: [foodId], references: [id])
  drink Drink? @relation(fields: [drinkId], references: [id])

  // @@map("cart_items")
  @@index([drinkId])
  @@index([foodId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  isRead    Boolean  @default(false)
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Notification_userId_fkey")
}

model Chat {
  id        String    @id @default(uuid())
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[] @relation("ChatMessage")

  @@index([userId], map: "Chat_userId_fkey")
}

model Message {
  id         String   @id @default(uuid())
  chatId     String
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  chat       Chat     @relation("ChatMessage", fields: [chatId], references: [id])

  @@index([chatId], map: "Message_chatId_fkey")
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  amount        Float // Số tiền thanh toán
  method        PaymentMethod // Phương thức thanh toán
  status        PaymentStatus @default(PENDING) // Trạng thái thanh toán
  transactionId String? // ID giao dịch (nếu có)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Quan hệ với đơn hàng
  order         Order    @relation("OrderPayment", fields: [orderId], references: [id]) // Add `fields` and `references`
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  foodId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  food      Food     @relation(fields: [foodId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([foodId], map: "Comment_foodId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model Delivery {
  id        String   @id @default(uuid())
  orderId   String   @unique
  shipperId String
  status    String
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // order     Order    @relation(fields: [orderId], references: [id])
  shipper   User     @relation(fields: [shipperId], references: [id])

  @@index([shipperId], map: "Delivery_shipperId_fkey")
}

model Transaction {
  id            String            @id @default(uuid())
  userId        String
  amount        Float
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  bankName      String?
  accountNumber String?
  accountName   String?
  transferCode  String?
  content       String?
  driverCode    String?
  proofImage    String?
  adminId       String?
  note          String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          User              @relation(fields: [userId], references: [id])

  @@index([userId], map: "Transaction_userId_fkey")
}

enum Role {
  ADMIN
  CUSTOMER
  RESTAURANTS
  SHIPPER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum TargetType {
  DRINK
  FOOD
  RESTAURANT
  SHIPPER
}

enum OrderStatus {
  PENDING // Đang chờ xác nhận
  CONFIRMED // Đã xác nhận
  PREPARING // Đang chuẩn bị
  PICKED_UP // Đã lấy hàng
  DELIVERING // Đang giao hàng
  DELIVERED // Đã giao hàng
  CANCELLED // Đã hủy
}

enum PaymentMethod {
  CASH // Tiền mặt
  CREDIT_CARD // Thẻ tín dụng
  PAYPAL // PayPal
  MOMO // Ví điện tử Momo
  ZALOPAY // Ví điện tử ZaloPay
}

enum PaymentStatus {
  PENDING // Chưa thanh toán
  PAID // Đã thanh toán
  REFUNDED // Đã hoàn tiền
  FAILED // Thanh toán thất bại
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  EARNING
  COMMISSION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  REJECTED
  CANCELLED
}
